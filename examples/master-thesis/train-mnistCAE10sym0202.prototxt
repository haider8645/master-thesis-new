name: "train-mnistCAE10sym0202"
layers {
  name: "data"
  type: HDF5_DATA
  top: "data"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/home/lod/master-thesis/examples/master-thesis/data/trainnormfile.txt"
    batch_size: 100
  }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "data"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/home/lod/master-thesis/examples/master-thesis/data/testnormfile.txt"
    batch_size: 100
  }
}
# --------- encoding part ---------
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 1
  blobs_lr: 3
  convolution_param {
    num_output: 8
    kernel_size: 9
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layers {
  name: "sig1en"
  type: SIGMOID
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "conv1"
  top: "conv2"
  blobs_lr: 1
  blobs_lr: 3
  convolution_param {
    num_output: 4
    kernel_size: 9
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layers {
  name: "sig2en"
  type: SIGMOID
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "ip1encode"
  type: INNER_PRODUCT
  bottom: "conv2"
  top: "ip1encode"
  blobs_lr: 1
  blobs_lr: 3
  inner_product_param {
    num_output: 250
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" }
  }
}
layers {
  name: "sig3en"
  type: SIGMOID
  bottom: "ip1encode"
  top: "ip1encode"
}
layers {
  name: "ip2encode"
  type: INNER_PRODUCT
  bottom: "ip1encode"
  top: "ip2encode"
 blobs_lr: 1
 blobs_lr: 3
  inner_product_param {
    num_output: 2
    weight_filler { type: "gaussian" std: 1 sparse: 2 }
    bias_filler { type: "constant" }
  }
}
# --------- decoding part ---------
layers {
  name: "ip1decode"
  type: INNER_PRODUCT
  bottom: "ip2encode"
  top: "ip1decode"
  blobs_lr: 1
  blobs_lr: 3
  inner_product_param {
    num_output: 250
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" }
  }
}
layers {
  name: "sig3de"
  type: SIGMOID
  bottom: "ip1decode"
  top: "ip1decode"
}
layers {
  name: "deconv2"
  type: DECONVOLUTION
  bottom: "ip1decode"
  top: "deconv2"
  blobs_lr: 1
  blobs_lr: 3
  convolution_param {
    num_output: 4
    kernel_size: 12
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layers {
  name: "sig2de"
  type: SIGMOID
  bottom: "deconv2"
  top: "deconv2"
}
layers {
  name: "deconv1"
  type: DECONVOLUTION
  bottom: "deconv2"
  top: "deconv1"
  blobs_lr: 1
  blobs_lr: 3
  convolution_param {
    num_output: 4
    kernel_size: 17
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layers {
  name: "sig1de"
  type: SIGMOID
  bottom: "deconv1"
  top: "deconv1"
}
# -- convert back to 784 elements --
layers {
  name: "deconv1neur"
  type: DECONVOLUTION
  bottom: "deconv1"
  top: "deconv1neur"
  blobs_lr: 1
  blobs_lr: 3
  convolution_param {
    num_output: 1
    kernel_size: 1
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
# --------- calculate loss ---------
layers {
  name: "loss"
  type: SIGMOID_CROSS_ENTROPY_LOSS
  bottom: "deconv1neur"
  bottom: "data"
  top: "cross_entropy_loss"
  loss_weight: 1
}
layers {
  name: "deconv1neursig"
  type: SIGMOID
  bottom: "deconv1neur"
  top: "deconv1neursig"
}
layers {
  name: "loss"
  type: EUCLIDEAN_LOSS
  bottom: "deconv1neursig"
  bottom: "data"
  top: "l2_error"
  loss_weight: 0
}
