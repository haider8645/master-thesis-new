name: "EarlyFusion"

#Image data
layer {
  name: "data/img"
  type: "Data"
  top: "data/img"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/mean/img_5_2_mean.binaryproto"
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_300_5_2_train/img_train_db"
    batch_size: 30
    backend: LMDB
  }
}
layer {
  name: "data/img"
  type: "Data"
  top: "data/img"
#  top: "label"
  include {
    phase: TEST
  }
  transform_param {
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_150_5_2_val/img_val_db"
#     source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_250_5_2_eval/img_eval_db"
    batch_size: 1
    backend: LMDB
  }
}

#NIR data

layer {
  name: "data/nir"
  type: "Data"
  top: "data/nir"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_300_5_2_train/nir_train_db"
    batch_size: 30
    backend: LMDB
  }
}
layer {
  name: "data/nir"
  type: "Data"
  top: "data/nir"
  include {
    phase: TEST
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_150_5_2_val/nir_val_db"
#     source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_250_5_2_eval/nir_eval_db"
    batch_size: 1
    backend: LMDB
  }
}
##########################################
layer {
  name: "nir_data/bn"
  type: "BatchNorm"
  bottom: "data/nir"
  top: "nir_data/bn"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  batch_norm_param {
    moving_average_fraction: 0.9
  }
}

layer {
  name: "nir_data/scale"
  type: "Scale"
  bottom: "nir_data/bn"
  top: "nir_data/scale"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  scale_param {
    bias_term: true
  }
}

layer {
  name: "nir/fc1"
  type: "InnerProduct"
  bottom: "nir_data/scale"
  top: "nir/fc1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 144
    weight_filler { type:"msra"}
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "nir_relu/fc1"
  type: "ReLU"
  bottom: "nir/fc1"
  top: "nir/fc1"
}


##########################################
layer {
  name: "img_data/bn"
  type: "BatchNorm"
  bottom: "data/img"
  top: "img_data/bn"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  batch_norm_param {
    moving_average_fraction: 0.9
  }
}
layer {
  name: "img_data/scale"
  type: "Scale"
  bottom: "img_data/bn"
  top: "img_data/scale"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  scale_param {
    bias_term: true
  }
}




# --------- encoding part ---------
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "img_data/scale"
  top: "conv1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 256
    kernel_size: 11
    stride: 4
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu1conv1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool:  MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 128
    kernel_size: 5
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "reluconv2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
#  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 64
    kernel_size: 3
    #pad: 1
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "reluconv3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}

layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
#  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
################
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 3
    #pad: 1
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "reluconv4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}

layer {
  name: "img/fc1"
  type: "InnerProduct"
  bottom: "conv4"
  top: "img/fc1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 144
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "img_relu/fc1"
  type: "ReLU"
  bottom: "img/fc1"
  top: "img/fc1"
}

layer {
  name: "img_nir/concat"
  type: "Concat"
  bottom: "img/fc1"
  bottom: "nir/fc1"
  top: "img_nir/concat"
  concat_param {
    axis: 1
}
}
layer {
  name: "reshape/concat"
  type: "Reshape"
  bottom: "img_nir/concat"
  top: "img_nir/concat_reshape"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 32
      dim: 3
      dim: 3 # infer it from the other dimensions
     }
   }
}


layer {
  name: "deconv4"
  type: "Deconvolution"
  bottom: "img_nir/concat_reshape"
  top: "deconv4"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 1
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "reludeconv4"
  type: "ReLU"
  bottom: "deconv4"
  top: "deconv4"
}

layer {
  name: "unpool4"
  type: "UNPOOLING"
  bottom: "deconv4"
#  bottom: "pool2_mask"
  top: "unpool4"
  unpooling_param {
     unpool: MAX
     kernel_size: 2
     stride: 2
     unpool_size: 6
  }
}


###############




layer {
  name: "deconv3"
  type: "Deconvolution"
  bottom: "unpool4"
  top: "deconv3" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "reludeconv3"
  type: "ReLU"
  bottom: "deconv3"
  top: "deconv3"
}

layer {
  name: "unpool3"
  type: "UNPOOLING"
  bottom: "deconv3"
#  bottom: "pool2_mask"
  top: "unpool3"
  unpooling_param {
     unpool: MAX
     kernel_size: 2
     stride: 2
     unpool_size: 20
  }
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "unpool3"
  top: "deconv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 128
    kernel_size: 5
    stride: 1
#    pad: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "deconv2relu"
  type: "ReLU"
  bottom: "deconv2"
  top: "deconv2"
}

layer {
  name: "unpool2"
  type: "UNPOOLING"
  bottom: "deconv2"
#  bottom: "pool1_mask"
  top: "unpool2"
  unpooling_param {
    unpool: MAX
    kernel_size: 2
    stride: 2
    unpool_size: 48
  }
}

layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "unpool2"
  top: "deconv1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 256
    kernel_size: 8
    stride: 1 
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "deconv1relu"
  type: "ReLU"
  bottom: "deconv1"
  top: "deconv1"
}

layer {
  name: "deconv0"
  type: "Deconvolution"
  bottom: "deconv1"
  top: "deconv0"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 3
    kernel_size: 11
    stride: 4
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 0 }
  }
}


layer {
  name: "deconv0relu"
  type: "ReLU"
  bottom: "deconv0"
  top: "deconv0"
}



# --------- calculate loss ---------
#layer {
#  name: "loss"
#  type: "SigmoidCrossEntropyLoss"
#  bottom: "deconv0"
#  bottom: "data"
#  top: "cross_entropy_loss"
#  loss_weight: 1
#}
#layer {
#  name: "deconv1neursig"
#  type: "Sigmoid"
#  bottom: "deconv0"
#  top: "deconv1neursig"
#}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "deconv0"
  bottom: "img_data/scale"
  top: "l2_error"
  loss_weight: 1
}
