name: "Dual Tied Weights Network"
#Image data
layer {
  name: "data/img"
  type: "Data"
  top: "data/img"
  include {
    phase: TRAIN
  }
  transform_param {
#    mean_file: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/mean/img_5_2_mean.binaryproto"
    scale: 0.003921569
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_300_5_2_train/img_train_db"
    batch_size: 1
    backend: LMDB
  }
}
layer {
  name: "data/img"
  type: "Data"
  top: "data/img"
#  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.003921569
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_150_5_2_val/img_val_db"
#    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_250_5_2_eval/img_eval_db"
    batch_size: 1
    backend: LMDB
  }
}


layer {
  name: "data/nir"
  type: "Data"
  top: "data/nir"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_300_5_2_train/nir_train_db"
    batch_size: 1
    backend: LMDB
  }
}

layer {
  name: "data/nir"
  type: "Data"
  top: "data/nir"
  include {
    phase: TEST
  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_150_5_2_val/nir_val_db"
#    source: "/home/lod/master-thesis/LMDB-datasets/prepared_dataSets/dataSet_5c_250_5_2_eval/nir_eval_db"
    batch_size: 1
    backend: LMDB
  }
}

layer {
  name: "nir_data/bn"
  type: "BatchNorm"
  bottom: "data/nir"
  top: "nir_data/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
  }
}

######################################## NIR ENCODER ################################################
layer {
  name: "conv1/nir"
  type: "Convolution"
  bottom: "nir_data/bn"
  top: "conv1/nir"
  param { name: "conv1_nir_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 1 decay_mult: 0 }
  convolution_param {
    num_output: 235
    kernel_size: 1
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "relu_nir/conv1"
  type: "PReLU"
  bottom: "conv1/nir"
  top: "conv1/nir"
}

layer {
  name: "nir/fc1"
  type: "InnerProduct"
  bottom: "conv1/nir"
  top: "nir/fc1"
  param {
   name: "fc1_nir_matrix" 
   lr_mult:1
   decay_mult: 1 

}
  param { lr_mult: 1 decay_mult: 0 }
  inner_product_param {
    num_output: 616
    weight_filler { type:"msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "nir_relu/fc1"
  type: "PReLU"
  bottom: "nir/fc1"
  top: "nir/fc1"
}
layer {
  name: "nir/fc2"
  type: "InnerProduct"
  bottom: "nir/fc1"
  top: "nir/fc2"
  param { name: "fc2_nir_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 1 decay_mult: 0 }
  inner_product_param {
    num_output: 450
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "nir_relu/fc2"
  type: "PReLU"
  bottom: "nir/fc2"
  top: "nir/fc2"
}
######################################## NIR ENCODER ENDED ################################################
######################################## IMAGES ENCODER STARTED ################################################

layer {
  name: "img_data/bn"
  type: "BatchNorm"
  bottom: "data/img"
  top: "img_data/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "img_data/bn"
  top: "conv1"
  param { name: "conv1_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "relu1conv1"
  type: "PReLU"
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "conv2_r"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2_r"
  param { name: "conv2_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 256
    kernel_size: 5
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "reluconv2"
  type: "PReLU"
  bottom: "conv2_r"
  top: "conv2_r"
}
layer {
  name: "conv3_r"
  type: "Convolution"
  bottom: "conv2_r"
  top: "conv3_r"
  param { name: "conv3_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 384
    kernel_size: 3
    #pad: 1
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "reluconv3"
  type: "PReLU"
  bottom: "conv3_r"
  top: "conv3_r"
}

layer {
  name: "conv4_r"
  type: "Convolution"
  bottom: "conv3_r"
  top: "conv4_r"
  param { name: "conv4_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 384
    kernel_size: 3
    #pad: 1
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "reluconv4"
  type: "PReLU"
  bottom: "conv4_r"
  top: "conv4_r"
}


layer {
  name: "img/fc0"
  type: "Flatten"
  bottom: "conv4_r"
  top: "img/fc0"
}

layer {
  name: "img/fc1"
  type: "InnerProduct"
  bottom: "img/fc0"
  top: "img/fc1"
  param { name: "fc1_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 2048
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "img_relu/fc1"
  type: "PReLU"
  bottom: "img/fc1"
  top: "img/fc1"
}

####################################################### IMAGES ENCODER ENDED ########################################################
###################### CONCAT ###########################
layer {
  name: "img_nir/concat"
  type: "Concat"
  bottom: "img/fc1"
  bottom: "nir/fc2"
  top: "img_nir/concat"
  concat_param {
    axis: 1
}
}

layer {
  name: "img_nir_concat_relu"
  type: "PReLU"
  bottom: "img_nir/concat"
  top: "img_nir/concat"
}

################################## NIR DECODER STARTED ##############################################

#layer {
#  name: "split_layer"
#  type: "Split"
#  bottom: "img_nir/concat"
#  top: "split_nir"
#  top: "split_img"
#}



layer {
  name: "nir/fc3"
  type: "InnerProduct"
  bottom: "img_nir/concat"
  top: "nir/fc3"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 1 decay_mult: 0 }
  inner_product_param {
    num_output: 450
#    transpose: true
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "nir_relu/fc3"
  type: "PReLU"
  bottom: "nir/fc3"
  top: "nir/fc3"
}
layer {
  name: "nir/fc4"
  type: "InnerProduct"
  bottom: "nir/fc3"
  top: "nir/fc4"
  param {name: "nir_fc2_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 1 decay_mult: 0 }
  inner_product_param {
    num_output: 616
    transpose: true
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "nir_relu/fc4"
  type: "PReLU"
  bottom: "nir/fc4"
  top: "nir/fc4"
}

layer {
  name: "reshape/nir"
  type: "Reshape"
  bottom: "nir/fc4"
  top: "nir/concat_reshape"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 1
      dim: 11
      dim: 56 # infer it from the other dimensions
     }
   }
}
layer {
  name: "nir/deconv1"
  type: "Deconvolution"
  bottom: "nir/concat_reshape"
  top: "nir/deconv1"
  param {lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 1 decay_mult: 0 }
  convolution_param {
    num_output: 235
    kernel_size: 1
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "relu_nir/deconv1"
  type: "PReLU"
  bottom: "nir/deconv1"
  top: "nir/deconv1"
}

layer {
  name: "loss/nir"
  type: "EuclideanLoss"
  bottom: "nir/deconv1"
  bottom: "data/nir"
  top: "l2_error/nir"
  loss_weight: 1
}

##################################################### NIR DECODED ENDED  ########################################################

layer {
  name: "img/fc4"
  type: "InnerProduct"
  bottom: "img_nir/concat"
  top: "img/fc4"
  param {lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 2048
#    transpose: true
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "img_relu/fc4"
  type: "PReLU"
  bottom: "img/fc4"
  top: "img/fc4"
}

layer {
  name: "img/fc2"
  type: "InnerProduct"
  bottom: "img/fc4"
  top: "img/fc2"
  param { name: "fc1_img_matrix"lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 9600
    transpose: true
    weight_filler { type: "msra"}
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "img_relu/fc2"
  type: "PReLU"
  bottom: "img/fc2"
  top: "img/fc2"
}



layer {
  name: "reshape/img"
  type: "Reshape"
  bottom: "img/fc2"
  top: "img/concat_reshape"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 384
      dim: 5
      dim: 5 # infer it from the other dimensions
     }
   }
}

layer {
  name: "deconv3"
  type: "Deconvolution"
  bottom: "img/concat_reshape"
  top: "deconv3"
  param {name: "conv4_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 384
    kernel_size: 3
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "reludeconv3"
  type: "PReLU"
  bottom: "deconv3"
  top: "deconv3"
}

layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "deconv3"
  top: "deconv2" 
  param {name: "conv3_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output:256
    kernel_size: 3
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "reludeconv2"
  type: "PReLU"
  bottom: "deconv2"
  top: "deconv2"
}

layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "deconv2"
  top: "deconv1"
  param {name: "conv2_img_matrix" lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 96
    kernel_size: 5
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "deconv1relu"
  type: "PReLU"
  bottom: "deconv1"
  top: "deconv1"
}

layer {
  name: "deconv0"
  type: "Deconvolution"
  bottom: "deconv1"
  top: "deconv0"
  param {lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 3
    kernel_size: 11
    stride: 4
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}
layer {
  name: "deconv0relu"
  type: "PReLU"
  bottom: "deconv0"
  top: "deconv0"
}

layer {
  name: "output"
  type: "Deconvolution"
  bottom: "deconv0"
  top: "output"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 3
    kernel_size: 25
    stride: 1
    weight_filler { type: "msra" }
    bias_filler { type: "constant" value: 1 }
  }
}


layer {
  name: "outputrelu"
  type: "PReLU"
  bottom: "output"
  top: "output"
}



# --------- calculate loss ---------
#layer {
#  name: "loss"
#  type: "SigmoidCrossEntropyLoss"
#  bottom: "output"
#  bottom: "img_data/bn"
#  top: "cross_entropy_loss"
#  loss_weight: 0.5
#}
#layer {
#  name: "deconv1neursig"
#  type: "Sigmoid"
#  bottom: "deconv0"
#  top: "deconv1neursig"
#}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "data/img"
  top: "l2_error"
  loss_weight: 1
}
