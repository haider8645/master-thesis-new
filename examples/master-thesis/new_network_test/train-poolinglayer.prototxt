name: "Autoencoder"
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "/home/lod/master-thesis/examples/master-thesis/new_network_test/image_mean.binaryproto"
    scale: 0.0039215684
  }
  data_param {
    source: "/home/haider/caffe/LMDB-datasets/trashnet384x384/train_lmdb"
    batch_size: 10
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.0039215684
    mean_file: "/home/lod/master-thesis/examples/master-thesis/new_network_test/image_mean.binaryproto"

  }
  data_param {
    source: "/home/lod/master-thesis/LMDB-datasets/trashnet-384-384/test_lmdb"
    batch_size: 1
    backend: LMDB
  }
}
# --------- encoding part ---------
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu1"
  type: "Sigmoid"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
#  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 4
    stride: 4
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu2"
  type: "Sigmoid"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
#  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 4
    stride: 4
  }
}
layer {
  name: "ip1encode"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1encode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 500
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "sig3en"
  type: "Sigmoid"
  bottom: "ip1encode"
  top: "ip1encode"
}
layer {
  name: "ip2encode"
  type: "InnerProduct"
  bottom: "ip1encode"
  top: "ip2encode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 30
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
# --------- decoding part ---------
layer {
  name: "ip1decode"
  type: "InnerProduct"
  bottom: "ip2encode"
  top: "ip1decode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 500
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "sig9de"
  type: "Sigmoid"
  bottom: "ip1decode"
  top: "ip1decode"
}
layer {
  name: "ip2decode"
  type: "InnerProduct"
  bottom: "ip1decode"
  top: "ip2decode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 8649
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "sig4en"
  type: "Sigmoid"
  bottom: "ip2decode"
  top: "ip2decode"
}

layer {
    name: "reshape"
    type: "Reshape"
    bottom: "ip2decode"
    top: "ip1decodesh"
    reshape_param { shape { dim: 0 dim: 1 dim: 93 dim: 93 } }
}
layer {
  name: "unpool2"
  type: "UNPOOLING"
  bottom: "ip1decodesh"
#  bottom: "pool2_mask"
  top: "unpool2"
  unpooling_param {
    unpool: MAX
    kernel_size: 2
    stride: 2
    unpool_size: 186
  }
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "unpool2"
  top: "deconv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu3"
  type: "Sigmoid"
  bottom: "deconv2"
  top: "deconv2"
}
layer {
  name: "unpool1"
  type: "UNPOOLING"
  bottom: "deconv2"
#  bottom: "pool1_mask"
  top: "unpool1"
  unpooling_param {
    unpool: MAX
    kernel_size: 2
    stride: 2
    unpool_size: 380
  }
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "unpool1"
  top: "deconv1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 3
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu4"
  type: "Sigmoid"
  bottom: "deconv1"
  top: "deconv1"
}


# -- convert back to 784 elements --
#layer {
#  name: "deconv1neur"
#  type: "Deconvolution"
#  bottom: "unpool1"
#  top: "deconv1neur"
#  param { lr_mult: 1 decay_mult: 1 }
#  param { lr_mult: 3 decay_mult: 0 }
#  convolution_param {
#    num_output: 1
#    kernel_size: 5
#    stride: 1
#    weight_filler { type: "xavier" }
#    bias_filler { type: "constant" value: 0 }
#  }
#}
# --------- calculate loss ---------
layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "deconv1"
  bottom: "data"
  top: "cross_entropy_loss"
  loss_weight: 1
}
layer {
  name: "deconv1neursig"
  type: "Sigmoid"
  bottom: "deconv1"
  top: "deconv1neursig"
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "deconv1neursig"
  bottom: "data"
  top: "l2_error"
  loss_weight: 0
}
||||||| merged common ancestors
=======
name: "Autoencoder"
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.0039215684
  }
  data_param {
    source: "/home/haider/caffe/LMDB-datasets/trashnet384x384/train_lmdb"
    batch_size: 10
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.0039215684
  }
  data_param {
    source: "/home/haider/caffe/LMDB-datasets/trashnet384x384/test_lmdb"
    batch_size: 1
    backend: LMDB
  }
}
# --------- encoding part ---------
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
#  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
#  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1encode"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1encode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 500
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "sig3en"
  type: "Sigmoid"
  bottom: "ip1encode"
  top: "ip1encode"
}
layer {
  name: "ip2encode"
  type: "InnerProduct"
  bottom: "ip1encode"
  top: "ip2encode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 30
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
# --------- decoding part ---------
layer {
  name: "ip1decode"
  type: "InnerProduct"
  bottom: "ip2encode"
  top: "ip1decode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 500
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "sig3en"
  type: "Sigmoid"
  bottom: "ip1decode"
  top: "ip1decode"
}
layer {
  name: "ip2decode"
  type: "InnerProduct"
  bottom: "ip1decode"
  top: "ip2decode"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  inner_product_param {
    num_output: 432450
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "sig4en"
  type: "Sigmoid"
  bottom: "ip2decode"
  top: "ip2decode"
}

layer {
    name: "reshape"
    type: "Reshape"
    bottom: "ip1decode"
    top: "ip1decodesh"
    reshape_param { shape { dim: 0 dim: 50 dim: 93 dim: 93 } }
}
layer {
  name: "unpool2"
  type: "UNPOOLING"
  bottom: "ip1decodesh"
#  bottom: "pool2_mask"
  top: "unpool2"
  unpooling_param {
    unpool: MAX
    kernel_size: 2
    stride: 2
    unpool_size: 186
  }
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "unpool2"
  top: "deconv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "deconv2"
  top: "deconv2"
}
layer {
  name: "unpool1"
  type: "UNPOOLING"
  bottom: "deconv2"
#  bottom: "pool1_mask"
  top: "unpool1"
  unpooling_param {
    unpool: MAX
    kernel_size: 2
    stride: 2
    unpool_size: 380
  }
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "unpool1"
  top: "deconv1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 3 decay_mult: 0 }
  convolution_param {
    num_output: 3
    kernel_size: 5
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "deconv1"
  top: "deconv1"
}


# -- convert back to 784 elements --
#layer {
#  name: "deconv1neur"
#  type: "Deconvolution"
#  bottom: "unpool1"
#  top: "deconv1neur"
#  param { lr_mult: 1 decay_mult: 1 }
#  param { lr_mult: 3 decay_mult: 0 }
#  convolution_param {
#    num_output: 1
#    kernel_size: 5
#    stride: 1
#    weight_filler { type: "xavier" }
#    bias_filler { type: "constant" value: 0 }
#  }
#}
# --------- calculate loss ---------
layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "deconv1"
  bottom: "data"
  top: "cross_entropy_loss"
  loss_weight: 1
}
layer {
  name: "deconv1neursig"
  type: "Sigmoid"
  bottom: "deconv1"
  top: "deconv1neursig"
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "deconv1neursig"
  bottom: "data"
  top: "l2_error"
  loss_weight: 0
}
>>>>>>> abf168246847a24b7d208e847f053cc7c28f8559
